package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"time"

	"Graphql/utils"
)

// CreateTicket is the resolver for the createTicket field.
func (r *mutationResolver) CreateTicket(ctx context.Context, title string, description *string, priority *TicketPriority, assigneeID *string, reporterID string, tags []*string) (*Ticket, error) {
	// Generate a unique ID for the ticket
	id := utils.GenerateID()

	// Set default priority if not provided
	ticketPriority := TicketPriorityMedium
	if priority != nil {
		ticketPriority = *priority
	}

	// Get current timestamp for created/updated times
	now := time.Now().UTC().Format(time.RFC3339)

	// Create the new ticket
	ticket := &Ticket{
		ID:        id,
		Title:     title,
		Status:    TicketStatusOpen, // New tickets are always OPEN
		Priority:  ticketPriority,
		CreatedAt: now,
		UpdatedAt: now,
		Reporter:  &User{ID: reporterID},
		Tags:      tags,
	}

	// Set optional fields if provided
	if description != nil {
		ticket.Description = description
	}
	if assigneeID != nil {
		ticket.Assignee = &User{ID: *assigneeID}
	}

	// Use the injected database dependency to store the ticket
	if err := r.Resolver.db.CreateTicket(ctx, ticket); err != nil {
		return nil, fmt.Errorf("failed to create ticket: %w", err)
	}

	return ticket, nil
}

// UpdateTicket is the resolver for the updateTicket field.
func (r *mutationResolver) UpdateTicket(ctx context.Context, id string, title *string, description *string, status *TicketStatus, priority *TicketPriority, assigneeID *string, tags []*string) (*Ticket, error) {
	panic(fmt.Errorf("not implemented: UpdateTicket - updateTicket"))
}

// DeleteTicket is the resolver for the deleteTicket field.
func (r *mutationResolver) DeleteTicket(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTicket - deleteTicket"))
}

// Tickets is the resolver for the tickets field.
func (r *queryResolver) Tickets(ctx context.Context) ([]*Ticket, error) {
	panic(fmt.Errorf("not implemented: Tickets - tickets"))
}

// Ticket is the resolver for the ticket field.
func (r *queryResolver) Ticket(ctx context.Context, id string) (*Ticket, error) {
	fmt.Println("Ticket ID:", id)
	ticket, err := r.Resolver.db.GetTicket(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get ticket: %w", err)
	}
	fmt.Println(ticket)
	return ticket, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
