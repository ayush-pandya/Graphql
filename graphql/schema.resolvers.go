package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
)

// CreateTicket is the resolver for the createTicket field.
func (r *mutationResolver) CreateTicket(ctx context.Context, title string, description *string, priority *TicketPriority, assigneeID *string, reporterID string, tags []*string) (*Ticket, error) {
	panic(fmt.Errorf("not implemented: CreateTicket - createTicket"))
}

// UpdateTicket is the resolver for the updateTicket field.
func (r *mutationResolver) UpdateTicket(ctx context.Context, id string, title *string, description *string, status *TicketStatus, priority *TicketPriority, assigneeID *string, tags []*string) (*Ticket, error) {
	panic(fmt.Errorf("not implemented: UpdateTicket - updateTicket"))
}

// DeleteTicket is the resolver for the deleteTicket field.
func (r *mutationResolver) DeleteTicket(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTicket - deleteTicket"))
}

// Tickets is the resolver for the tickets field.
func (r *queryResolver) Tickets(ctx context.Context) ([]*Ticket, error) {
	panic(fmt.Errorf("not implemented: Tickets - tickets"))
}

// Ticket is the resolver for the ticket field.
func (r *queryResolver) Ticket(ctx context.Context, id string) (*Ticket, error) {
	panic(fmt.Errorf("not implemented: Ticket - ticket"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
