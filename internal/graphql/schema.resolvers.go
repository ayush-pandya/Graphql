package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"log"
	"time"

	ticketpb "github.com/ayush-pandya/Graphql/proto/ticket"
)

// Helper function to convert gRPC ticket to GraphQL ticket
func convertGRPCTicketToGraphQL(grpcTicket *ticketpb.Ticket) *Ticket {
	if grpcTicket == nil {
		return nil
	}
	fmt.Println(grpcTicket)
	// Convert gRPC enums to GraphQL enums
	var status TicketStatus
	switch grpcTicket.Status {
	case ticketpb.TicketStatus_TICKET_STATUS_OPEN:
		status = TicketStatusOpen
	case ticketpb.TicketStatus_TICKET_STATUS_IN_PROGRESS:
		status = TicketStatusInProgress
	case ticketpb.TicketStatus_TICKET_STATUS_RESOLVED:
		status = TicketStatusResolved
	case ticketpb.TicketStatus_TICKET_STATUS_CLOSED:
		status = TicketStatusClosed
	default:
		status = TicketStatusOpen
	}

	var priority TicketPriority
	switch grpcTicket.Priority {
	case ticketpb.TicketPriority_TICKET_PRIORITY_LOW:
		priority = TicketPriorityLow
	case ticketpb.TicketPriority_TICKET_PRIORITY_MEDIUM:
		priority = TicketPriorityMedium
	case ticketpb.TicketPriority_TICKET_PRIORITY_HIGH:
		priority = TicketPriorityHigh
	case ticketpb.TicketPriority_TICKET_PRIORITY_CRITICAL:
		priority = TicketPriorityCritical
	default:
		priority = TicketPriorityMedium
	}

	return &Ticket{
		ID:          grpcTicket.Id,
		Title:       grpcTicket.Title,
		Description: &grpcTicket.Description,
		Status:      status,
		Priority:    priority,
		Tags:        convertStringSliceToPointerSlice(grpcTicket.Tags),
		CreatedAt:   grpcTicket.CreatedAt.AsTime().Format(time.RFC3339),
		UpdatedAt:   grpcTicket.UpdatedAt.AsTime().Format(time.RFC3339),
	}
}

// Helper function to convert GraphQL enums to gRPC enums
func convertGraphQLPriorityToGRPC(priority *TicketPriority) ticketpb.TicketPriority {
	if priority == nil {
		return ticketpb.TicketPriority_TICKET_PRIORITY_MEDIUM
	}

	switch *priority {
	case TicketPriorityLow:
		return ticketpb.TicketPriority_TICKET_PRIORITY_LOW
	case TicketPriorityMedium:
		return ticketpb.TicketPriority_TICKET_PRIORITY_MEDIUM
	case TicketPriorityHigh:
		return ticketpb.TicketPriority_TICKET_PRIORITY_HIGH
	case TicketPriorityCritical:
		return ticketpb.TicketPriority_TICKET_PRIORITY_CRITICAL
	default:
		return ticketpb.TicketPriority_TICKET_PRIORITY_MEDIUM
	}
}

// Helper function to convert string slice to pointer slice
func convertStringSliceToPointerSlice(slice []string) []*string {
	result := make([]*string, len(slice))
	for i, s := range slice {
		result[i] = &s
	}
	return result
}

// Helper function to convert pointer slice to string slice
func convertPointerSliceToStringSlice(slice []*string) []string {
	result := make([]string, 0, len(slice))
	for _, s := range slice {
		if s != nil {
			result = append(result, *s)
		}
	}
	return result
}

// CreateTicket is the resolver for the createTicket field.
func (r *mutationResolver) CreateTicket(ctx context.Context, title string, description *string, priority *TicketPriority, status *string, assigneeID string, tags []*string) (*Ticket, error) {
	log.Printf("GraphQL Gateway: Creating ticket via gRPC - Title: %s", title)

	// Check if gRPC client is available
	if r.ticketClient == nil {
		return nil, fmt.Errorf("ticket service is not available")
	}

	// Convert GraphQL inputs to gRPC inputs
	desc := ""
	if description != nil {
		desc = *description
	}

	grpcPriority := convertGraphQLPriorityToGRPC(priority)
	grpcTags := convertPointerSliceToStringSlice(tags)

	// Call gRPC service
	grpcTicket, err := r.ticketClient.CreateTicket(ctx, title, desc, grpcPriority, assigneeID, grpcTags)
	if err != nil {
		log.Printf("GraphQL Gateway: Error calling gRPC CreateTicket: %v", err)
		return nil, fmt.Errorf("failed to create ticket: %w", err)
	}

	// Convert gRPC response to GraphQL
	ticket := convertGRPCTicketToGraphQL(grpcTicket)
	log.Printf("GraphQL Gateway: Successfully created ticket via gRPC - ID: %s", ticket.ID)

	return ticket, nil
}

// UpdateTicket is the resolver for the updateTicket field.
func (r *mutationResolver) UpdateTicket(ctx context.Context, id string, title *string, description *string, status *TicketStatus, priority *TicketPriority, assigneeID *string, tags []*string) (*Ticket, error) {
	log.Printf("GraphQL Gateway: Updating ticket via gRPC - ID: %s", id)

	// Check if gRPC client is available
	if r.ticketClient == nil {
		return nil, fmt.Errorf("ticket service is not available")
	}

	// Convert GraphQL inputs to gRPC inputs
	titleStr := ""
	if title != nil {
		titleStr = *title
	}

	descStr := ""
	if description != nil {
		descStr = *description
	}

	assigneeStr := ""
	if assigneeID != nil {
		assigneeStr = *assigneeID
	}

	grpcPriority := convertGraphQLPriorityToGRPC(priority)
	grpcTags := convertPointerSliceToStringSlice(tags)

	// For status, we need to convert it (simplified for now)
	grpcStatus := ticketpb.TicketStatus_TICKET_STATUS_OPEN
	if status != nil {
		switch *status {
		case TicketStatusOpen:
			grpcStatus = ticketpb.TicketStatus_TICKET_STATUS_OPEN
		case TicketStatusInProgress:
			grpcStatus = ticketpb.TicketStatus_TICKET_STATUS_IN_PROGRESS
		case TicketStatusResolved:
			grpcStatus = ticketpb.TicketStatus_TICKET_STATUS_RESOLVED
		case TicketStatusClosed:
			grpcStatus = ticketpb.TicketStatus_TICKET_STATUS_CLOSED
		}
	}

	// Call gRPC service
	grpcTicket, err := r.ticketClient.UpdateTicket(ctx, id, titleStr, descStr, grpcStatus, grpcPriority, assigneeStr, grpcTags)
	if err != nil {
		log.Printf("GraphQL Gateway: Error calling gRPC UpdateTicket: %v", err)
		return nil, fmt.Errorf("failed to update ticket: %w", err)
	}

	// Convert gRPC response to GraphQL
	ticket := convertGRPCTicketToGraphQL(grpcTicket)
	log.Printf("GraphQL Gateway: Successfully updated ticket via gRPC - ID: %s", ticket.ID)

	return ticket, nil
}

// DeleteTicket is the resolver for the deleteTicket field.
func (r *mutationResolver) DeleteTicket(ctx context.Context, id string) (*bool, error) {
	log.Printf("GraphQL Gateway: Deleting ticket via gRPC - ID: %s", id)

	// Check if gRPC client is available
	if r.ticketClient == nil {
		return nil, fmt.Errorf("ticket service is not available")
	}

	// Call gRPC service
	success, err := r.ticketClient.DeleteTicket(ctx, id)
	if err != nil {
		log.Printf("GraphQL Gateway: Error calling gRPC DeleteTicket: %v", err)
		return nil, fmt.Errorf("failed to delete ticket: %w", err)
	}

	log.Printf("GraphQL Gateway: Successfully deleted ticket via gRPC - ID: %s", id)
	return &success, nil
}

// Tickets is the resolver for the tickets field.
func (r *queryResolver) Tickets(ctx context.Context) ([]*Ticket, error) {
	log.Println("GraphQL Gateway: Listing tickets via gRPC")

	// Check if gRPC client is available
	if r.ticketClient == nil {
		return nil, fmt.Errorf("ticket service is not available")
	}

	// Call gRPC service
	grpcTickets, _, err := r.ticketClient.ListTickets(ctx, 100, "") // Get first 100
	if err != nil {
		log.Printf("GraphQL Gateway: Error calling gRPC ListTickets: %v", err)
		return nil, fmt.Errorf("failed to list tickets: %w", err)
	}

	// Convert gRPC response to GraphQL
	tickets := make([]*Ticket, len(grpcTickets))
	for i, grpcTicket := range grpcTickets {
		tickets[i] = convertGRPCTicketToGraphQL(grpcTicket)
	}

	log.Printf("GraphQL Gateway: Successfully listed %d tickets via gRPC", len(tickets))
	return tickets, nil
}

// Ticket is the resolver for the ticket field.
func (r *queryResolver) Ticket(ctx context.Context, id string) (*Ticket, error) {
	log.Printf("GraphQL Gateway: Getting ticket via gRPC - ID: %s", id)

	// Check if gRPC client is available
	if r.ticketClient == nil {
		return nil, fmt.Errorf("ticket service is not available")
	}

	// Call gRPC service
	grpcTicket, err := r.ticketClient.GetTicket(ctx, id)
	if err != nil {
		log.Printf("GraphQL Gateway: Error calling gRPC GetTicket: %v", err)
		return nil, fmt.Errorf("failed to get ticket: %w", err)
	}

	// Convert gRPC response to GraphQL
	ticket := convertGRPCTicketToGraphQL(grpcTicket)
	log.Printf("GraphQL Gateway: Successfully retrieved ticket via gRPC - ID: %s", ticket.ID)

	return ticket, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
